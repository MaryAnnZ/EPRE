#version 330 core

struct LightSource {
    vec3 position;
	float intensity;
    vec3 color;    	
	bool valid;
};

#define NR_LIGHTS 100
#define QUADRATIC 0.1
#define LINEAR 0.7

in vec2 UV;

out vec4 FragColor;

uniform LightSource lights[NR_LIGHTS];
uniform vec3 viewPos;
uniform sampler2D pos;
uniform sampler2D normal;
uniform sampler2D texture;
uniform bool attenuationOn;

void main()
{             
    // retrieve data from gbuffer
    vec3 FragPos = texture(pos, UV).rgb;
    vec3 Normal = texture(normal, UV).rgb;
    vec3 MaterialDiffuseColor = texture(texture, UV).rgb;
    float MaterialSpecularColor = texture(texture, UV).a;
    
    // then calculate lighting as usual
    vec3 lighting  = vec3(0.0, 0.0, 0.0);
	vec3 ambient = MaterialDiffuseColor * 0.1;
    vec3 viewDir  = normalize(viewPos - FragPos);

	lighting += ambient;
	vec3 E = normalize(viewDir);
    for(int i = 0; i < NR_LIGHTS; ++i)
    {
		//calculate light if initialized
		if (!lights[i].valid) {
			break;
		}

		 float distance = length(lights[i].position - FragPos);
		vec3 l = normalize( lights[i].position -  FragPos);
		float cosTheta = clamp(dot( Normal,l ), 0,1 );

        // diffuse
        vec3 lightDir = normalize(lights[i].position - FragPos);
        vec3 diffuse = MaterialDiffuseColor * lights[i].color * cosTheta / (distance*distance);
        
		// specular
		vec3 R = reflect(-l,Normal);
		float cosAlpha = clamp(dot(E,R ), 0,1 );	

        //vec3 halfwayDir = normalize(lightDir + viewDir);  
        //float spec = pow(max(dot(Normal, halfwayDir), 0.0), 20.0);
        vec3 specular = lights[i].color * MaterialSpecularColor * pow(cosAlpha,50) / (distance*distance);
       
	    // attenuation
		if (attenuationOn) {
			float attenuation = 1.0 / (1.0 + LINEAR * distance + QUADRATIC * distance * distance);
			diffuse *= attenuation;
			specular *= attenuation;
		}
        
		lighting += ((diffuse + specular) * lights[i].intensity);        
    }
    FragColor = vec4(lighting, 1.0);
}